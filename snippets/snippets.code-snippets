{
    "Remix LoaderFunction": {
        "prefix": "rmx:loader",
        "body": [
            "import type { LoaderFunction, LoaderFunctionArgs } from '@remix-run/node';",
            "export const loader: LoaderFunction = ({request, params}:LoaderFunctionArgs) => { ${1} }"
        ],
        "description": "Remix loader function"
    },
    "Remix ActionFunction": {
        "prefix": "rmx:action",
        "body": [
            "import type { ActionFunction, ActionFunctionArgs } from '@remix-run/node';",
            "export const action: ActionFunction = ({request, params}:ActionFunctionArgs) => { ${1} }"
        ],
        "description": "Remix actions function"
    },
    "Remix ErrorBoundary": {
        "prefix": "rmx:error",
        "body": [
            "import { isRouteErrorResponse, useRouteError} from '@remix-run/react';",
"export function ErrorBoundary() {
  const error = useRouteError();

  if (isRouteErrorResponse(error)) {
    return (
      <div>
        <h1>
          {error.status} {error.statusText}
        </h1>
        <p>{error.data}</p>
      </div>
    );
  } else if (error instanceof Error) {
    return (
      <div>
        <h1>Error</h1>
        <p>{error.message}</p>
        <p>The stack trace is:</p>
        <pre>{error.stack}</pre>
      </div>
    );
  } else {
    return <h1>Unknown Error</h1>;
  }
}
"
        ],
        "description": "Remix error boundary"
    },
    "Remix LinksFunction": {
        "prefix": "rmx:links",
        "body": [
            "import type { LinksFunction } from '@remix-run/node';",
            "import ${1:linkName} from '${2:path}';",
            "export const links: LinksFunction = () => [{ rel:'stylesheet', href: ${1:linkName} }]"
        ],
        "description": "Remix links function"
    },
    "Remix MetaFunction": {
        "prefix": "rmx:meta2",
        "body": [
            "import type { MetaFunction } from '@remix-run/node';",
            "export const meta: MetaFunction = () => [{ ${1:key}: '${2:value}' }];"
        ],
        "description": "Remix meta function"
    },
    "Remix Basic Component": {
        "prefix": "rmx:bc",
        "body": [
            "export const ${2:$TM_FILENAME_BASE} = () => <div>${2:$TM_FILENAME_BASE}</div>;"
        ],
        "description": "Remix basic component"
    },
    "Remix Basic Component with Props": {
        "prefix": "rmx:bcp",
        "body": [
            "type Props = { ${2:key}: ${3:type} };",
            "export const ${4:$TM_FILENAME_BASE} = ({${2:key}}:Props) => { return(<div>${4:$TM_FILENAME_BASE}</div>)};"
        ],
        "description": "Remix basic component with props"
    },
    "Remix Basic Route Component": {
        "prefix": "rmx:rc",
        "body": [
            "const ${1:$TM_FILENAME_BASE} = () => <section>${1:$TM_FILENAME_BASE}</section>;",
            "export default ${1:$TM_FILENAME_BASE}"
        ],
        "description": "Remix route component"
    },
    "Remix Route Component with all": {
        "prefix": "rmx:rca",
        "body": [
            "import type { ActionFunction, ActionFunctionArgs, LinksFunction, LoaderFunction, LoaderFunctionArgs, MetaFunction } from '@remix-run/node';",
            "import { isRouteErrorResponse, useRouteError} from '@remix-run/react';",
            "const ${1:$TM_FILENAME_BASE} = () => { return(<section></section>)};",
            "export default ${1:$TM_FILENAME_BASE}",
            "export const loader: LoaderFunction = ({request, params}:LoaderFunctionArgs) => { return [] }",
            "export const action: ActionFunction = ({request, params}:ActionFunctionArgs) => { return null }",
            "export const ErrorBoundary = () => { }",
            "export const links: LinksFunction = () => [];",
            "export const meta: MetaFunction = () => [];"
        ],
        "description": "Remix Route Component with meta, links, loader, action, and boundaries"
    }
}
